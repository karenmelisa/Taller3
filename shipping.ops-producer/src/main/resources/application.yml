server:
  port: 8087

spring:
  application:
    name: shipping-ops-producer
  data:
    redis:
      client-type: lettuce
      host: ${REDIS_HOST:localhost}
      port: 6379

kafka:
  topic:
    shipments: logistics.shipments.v1
  bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:29092}
  schema-registry-url: ${SCHEMA_REGISTRY_URL:http://localhost:8081}

redis:
  snapshot:
    ttl: 14400  # 4 hours in seconds
    key-prefix: "ship:event:"

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    tags:
      application: ${spring.application.name}

resilience4j:
  circuitbreaker:
    instances:
      kafkaPublisher:
        registerHealthIndicator: true
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 3
        minimumNumberOfCalls: 5
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
  retry:
    instances:
      kafkaPublisher:
        max-attempts: 3
        wait-duration: 500ms
        retry-exceptions:
          - org.apache.kafka.common.errors.TimeoutException
          - org.springframework.kafka.KafkaException